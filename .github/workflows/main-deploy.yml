name: Build and Deploy Spring API with Docker Compose

on:
  push:
    branches:
      - main
      - testando-compose

jobs:
  build-deploy:
    name: Build and Deploy Spring API with Docker Compose
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: "corretto"
          java-version: 17

      - name: Login to GitHub Container Registry
        run: |
          echo "${{ secrets.PAT_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

      - name: Copy Docker Compose file to VPS (Temporary Directory)
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.VPS_IP_ADDRESS }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          source: "./docker-compose.yml"
          target: "/tmp"

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.VPS_IP_ADDRESS }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          script: |
            # Login to GitHub Container Registry on the VPS
            echo "${{ secrets.PAT_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

            # Navigate to temp directory
            cd /tmp

            # Force remove existing containers (if they exist)
            docker rm -f nginx-proxy nginx-proxy-le || true

            # Remove any orphaned containers
            docker-compose down --remove-orphans

            # Clean up any old Docker resources
            docker system prune -f

            # Pull latest images
            docker-compose pull

            docker network create nginx-proxy

            # Start new containers
            docker-compose up -d --build
